# -*- coding: utf-8 -*-
"""Algoritmo Genético - Mochila.26042021.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fx4OnFdM3Q3JqI2nHO6g-QDyK_VKe97x

##Importação das Bibliotecas
"""

import numpy as np
import random
import matplotlib.pyplot as plt

"""##Criando a mochila e os itens da mochila"""

#cria os itens de 1 a 20
itens = np.arange(1,21)
#semente da aleatoriedade
#np.random.seed(10)
print(itens)
#randint: usado para gerar o vetor aleatório com 20 posições e valores de 1 a 15
peso = np.random.randint(1,15, size = 20)
valor = np.random.randint(10,750, size = 20)
peso_total_maximo_mochila = 50

print("Item No.   Peso    Valor")
for i in range(itens.shape[0]):
  print("      {0}     {1}      {2}\n".format(itens[i], peso[i], valor[i]))

"""##Criação da População Inicial e o número de gerações(iterações)"""

solucoes_por_populacao = 50
# itens.shape[0]: numeros de itens
#estabelece um par ordenado onde temos 50 linhas e 20 colunas
pop_size = (solucoes_por_populacao, itens.shape[0])
print("Tamanho da população e quantidade de itens= {}".format(pop_size))
populacao_inicial = np.random.randint(2, size = pop_size)
print("População Inicial: \n{}".format(populacao_inicial))

num_geracoes = 50

def cal_fitness(peso, valor, populacao_inicial, peso_total_maximo_mochila):
    fitness = np.empty(populacao_inicial.shape[0])
    for i in range(populacao_inicial.shape[0]):
        S_valor = np.sum(populacao_inicial[i]*valor)
        S_peso = np.sum(populacao_inicial[i]*peso)
        if S_peso <= peso_total_maximo_mochila:
            fitness[i] = S_valor
        else:
            fitness[i] = 0
    return fitness.astype(int)

def selection(fitness, num_pais_selecao, populacao):
    parents = np.empty((num_pais_selecao, populacao.shape[1]))

    #taca de comparação (torneio)
    k = 0.75
    for i in range(num_pais_selecao):
        #seleciona a aleatoriamente dois individuos da população
        x1=random.randint(0, populacao.shape[0]-1)
        x2=random.randint(0, populacao.shape[0]-1)

        if (fitness[x1] < fitness[x2]):
            aux=x1
            x1=x2
            x2=aux

        r=random.random()
        if (r<k):
            parents[i, :] = populacao[x1, :]
        else:
            parents[i, :] = populacao[x2, :]
    return parents

def crossover(parents):
    #vetor para filhos
    offsprings = []

    #defininfo o ponto do cruzamento
    crossover_point = int(parents.shape[1]/2)

    #taxa_cruzamento
    crossover_rate = 0.8
    i=0
    while (i<parents.shape[0]):
        x=random.random()
        if x < crossover_rate:
            parent1_index = i%parents.shape[0]
            parent2_index = (i+1)%parents.shape[0]

            filho1 = np.empty(parents.shape[1])
            filho2 = np.empty(parents.shape[1])

            filho1[0:crossover_point] = parents[parent1_index, 0: crossover_point]
            filho1[crossover_point:] = parents[parent2_index, crossover_point:]

            filho2[0:crossover_point] = parents[parent2_index, 0: crossover_point]
            filho2[crossover_point:] = parents[parent1_index, crossover_point:]

            offsprings.append(filho1)
            offsprings.append(filho2)
        i=i+2
        return np.asarray(offsprings, dtype=np.int32)

def mutation(offsprings):
    mutants=np.empty((offsprings.shape))
    mutation_rate = 0.4
    for i in range(mutants.shape[0]):
        random_value = random.random()
        mutants[i,:]=offsprings[i,:]
        if random_value > mutation_rate:
            continue
        int_random_value = random.randint(0,offsprings.shape[1]-1)
        if mutants[i, int_random_value] ==0:
            mutants[i, int_random_value]=1
        else:
            mutants[i, int_random_value]=0
    return mutants

def optimizeGA(peso, valor, populacao_inicial, pop_size, num_geracoes, peso_total_maximo_mochila):
    fitness_history = []
    parameters = []
    #proporção da quantidade dos pais que participarão do cruzamento
    num_pais_selecao = int(pop_size[0]*3/4)

    #percorre as gerações
    for i in range(num_geracoes):
        #calcula o fitness
        fitness = cal_fitness(peso, valor, populacao_inicial, peso_total_maximo_mochila)
        #print(fitness.argsort())
        #print(fitness)

        #elitismo para garantir os melhores individuos em cada geração
        populacao_inicial = populacao_inicial[fitness.argsort()[-pop_size[0]:]]
        #print(population)

        fitness = fitness[fitness.argsort()[-pop_size[0]:]]
        #print(fitness)

        fitness_history.append(fitness)

        #seleciona os pais
        pais = selection(fitness, num_pais_selecao, populacao_inicial)

        #realiza cruzamento
        filhos = crossover(pais)

        #realiza mutação
        mutants = mutation(filhos)

        if (mutants.size !=0):
            populacao_inicial=np.append(populacao_inicial, mutants, axis =0)

            populacao_inicial, index = np.unique(populacao_inicial, axis=0, return_index=True)

    print('Ultima Geração: \n{}\n'.format(populacao_inicial))
    fitness_last_gen = cal_fitness(peso, valor, populacao_inicial, peso_total_maximo_mochila)
    print('Fitness da ultima geração: \n{}\n'.format(fitness_last_gen))

    max_fitness = np.where(fitness_last_gen == np.max(fitness_last_gen))
    parameters.append(populacao_inicial[max_fitness[0][0],:])

    return parameters, fitness_history

"""##Main do Código: Chama a execução do AG"""

parameters, fitness_history=optimizeGA(peso, valor, populacao_inicial, pop_size, num_geracoes, peso_total_maximo_mochila)
print('A solucao de saida eh \n{}\n'.format(parameters))
itens_selecionados = itens * parameters
print('\n Os itens que irão maximizar a mochila são:')
total_peso = 0
total_valor = 0
for i in range(itens_selecionados.shape[1]):
  if itens_selecionados[0][i] !=0:
    print('{0}         {1}         {2}\n'.format(itens[i], peso[i], valor[i]))
    total_peso=total_peso+peso[i]
    total_valor=total_valor+valor[i]
print('        Peso: {0}       Valor{1}\n'.format(total_peso,total_valor))

fitness_history_mean = [np.mean(fitness) for fitness in fitness_history]
fitness_history_max = [np.max(fitness) for fitness in fitness_history]
plt.plot(list(range(num_geracoes)), fitness_history_mean, label ='Mean Fitness')
plt.plot(list(range(num_geracoes)), fitness_history_max, label ='Max Fitness')
plt.legend()
plt.title('Fitness through the generations')
plt.xlabel('Generations')
plt.ylabel('Fitness')
plt.show()
print(np.asarray(fitness_history).shape)